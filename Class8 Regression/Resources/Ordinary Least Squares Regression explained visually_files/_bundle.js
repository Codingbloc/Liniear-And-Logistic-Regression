(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";var THREE=require("three");require("OrbitControls")(THREE),require("TrackballControls")(THREE);var d3=require("d3");require("d3-masonic")(d3);var React=require("react"),color=require("color"),alphaify=require("alphaify"),utils=require("./utils"),style=require("./style"),LeastSquares=require("./LeastSquares.react"),LeastSquares3DModule=require("./LeastSquares3DModule.react"),RegressionAsNobsModule=require("./RegressionAsNobsModule.react"),SLRParameters=require("./SLRParameters.react"),App=React.createClass({displayName:"App",getInitialState:function(){var e=d3.scale.category10(),t=[[16,5],[13,23],[24,33],[43,32],[51,53],[84,65],[90,85]].map(function(t,a){return{point:t,color:e(a)}}),a={leastSquaresPoints:t,regressionPoints:[[20,20],[80,80]],betas:this._getBetas(t),leastSquaresErrors:this._updateLeastSquaresErrors(t)};return a},_locationAccessor:function(e){return e.point},_onDragOLSNob:function(e,t){if("point"===e){var a=this.state.leastSquaresPoints.slice(0);a[t.i].point=t.pos,this._updatePoint(a[t.i],t.pos)}},_onDragRegressionNob:function(e,t){if("regression"===e){var a=this.state.regressionPoints;this._updateRegressionPoint(a[t.i],t.pos)}},_updatePoint:function(e,t){var a=this.state.leastSquaresPoints.slice(0);e.point=t,this.setState({leastSquaresPoints:a,betas:this._getBetas(a),leastSquaresErrors:this._updateLeastSquaresErrors(a)})},_updateRegressionPoint:function(e,t){var a=this.state.regressionPoints.slice(0);e[0]=t[0],e[1]=t[1],this.setState({regressionPoints:a})},_updateLeastSquaresErrors:function(e){return utils.wrapLeastSquaresErrors(e,this._locationAccessor)},_getBetas:function(e){var t=e.map(function(e){return[e.point[0]]}),a=e.map(function(e){return e.point[1]});return utils.hessian(a,t)},_leastSquaresValueAccessor:function(e){return e.error},_leastSquaresColorAccessor:function(e){return e.color},render:function(){return React.createElement("div",null,React.createElement("h3",null,"This explanation is interactive!"),React.createElement("p",null,React.createElement("i",null,"Dials")," allow you to adjust scalar values.",React.createElement("img",{src:"/ev/linear-regression/resources/dial-tutorial.gif",style:style.tutorialVideo})),React.createElement("p",null,React.createElement("i",null,"Points")," that have a gray circle around them are draggable.",React.createElement("img",{style:style.tutorialVideo,src:"/ev/linear-regression/resources/point-tutorial.gif"})),React.createElement("p",null,"Statistical regression is basically a way to predict unknown quantities from a batch of existing data. For example, suppose we start out knowing the height and hand size of a bunch of individuals in a \"sample population,\" and that we want to figure out a way to predict hand size from height for individuals not in the sample. By applying OLS, we'll get an equation that takes hand size---the 'independent' variable---as an input, and gives height---the 'dependent' variable---as an output."),React.createElement("p",null,"Below, OLS is done behind-the-scenes to produce the regression equation. The constants in the regression---called 'betas'---are what OLS spits out. Here, beta_1 is an intercept; it tells what height would be even for a hand size of zero. And beta_2 is the coefficient on hand size; it tells how much taller we should expect someone to be for a given increment in their hand size. Drag the sample data to see the betas change."),React.createElement(LeastSquares,{key:"least-squares",points:this.state.leastSquaresPoints,betas:this.state.betas,onDragNob:this._onDragOLSNob,margins:{l:20,t:20,r:30,b:30},mode:"point",width:310,height:310,showErrorSquares:!1,showErrorLines:!1,colorAccessor:function(){return color.senary},style:{"float":"left"},xAxisLabel:"hand size",yAxisLabel:"height"}),React.createElement(SLRParameters,{width:310,height:310,betas:this.state.betas}),React.createElement("p",null,'At some point, you probably asked your parents, "Where do betas come from?" Let\'s raise the curtain on how OLS finds its betas.'),React.createElement("p",null,"Error is the difference between prediction and reality: the vertical distance between a real data point and the regression line. OLS is concerned with the ",React.createElement("em",null,"squares")," of the errors. It tries to find the line going through the sample data that minimizes the sum of the squared errors. Below, the squared errors are represented as squares, and your job is to choose betas (the slope and intercept of the regression line) so that the total area of all the squares (the sum of the squared errors) is as small as possible. That's OLS!"),React.createElement(RegressionAsNobsModule,{points:this.state.leastSquaresPoints,onDragOLSNob:this._onDragOLSNob,leastSquaresValueAccessor:function(e){return e.error},leastSquaresColorAccessor:function(e){return e.d.color}}),React.createElement(LeastSquares3DModule,null),React.createElement("p",null,"Special thanks to ",React.createElement("a",{href:"http://twitter.com/enjalot"},"Ian Johnson")," for reviewing an earlier version of this explorable explanation and suggesting the idea of using GIFs to explain how the controls work."))}});React.render(React.createElement(App,null),d3.select(".myApp").node());


},{"./LeastSquares.react":3,"./LeastSquares3DModule.react":4,"./RegressionAsNobsModule.react":7,"./SLRParameters.react":8,"./style":10,"./utils":11,"OrbitControls":"OrbitControls","TrackballControls":"TrackballControls","alphaify":"alphaify","color":"color","d3":"d3","d3-masonic":"d3-masonic","react":"react","three":"three"}],2:[function(require,module,exports){
"use strict";var _extends=require("babel-runtime/helpers/extends")["default"],d3=require("d3"),React=require("react"),PureRenderMixin=require("react/lib/ReactComponentWithPureRenderMixin"),Dial=React.createClass({displayName:"Dial",mixins:[PureRenderMixin],sel:function(){return d3.select(this.getDOMNode())},getDefaultProps:function(){return{min:-10,max:10,value:0,size:120,nobFill:"rgba(0, 0, 0, 0.1)",wrapInSVG:!0}},getInitialState:function(){return this._updateStateFromProps(this.props,{scale:null})},_updateStateFromProps:function(e,t){return t.scale=d3.scale.linear().domain([e.min,e.max]).range([0,360]).clamp(!0),t},componentWillReceiveProps:function(e){this.setState(this._updateStateFromProps(e,this.state))},componentDidMount:function(){var e=this.sel().select(".stage"),t=this,r=d3.behavior.drag().on("drag",function(){var r=d3.mouse(e.node()),a=Math.atan2(r[1],r[0])/Math.PI*180+180,n=t.state.scale.invert(a);t.props.onChangeValue(n)});e.call(r)},render:function(){var e=this.props,t=this.state,r=e.size,a=e.style,n=e.nobFill,s=e.nobStroke,i=e.value,l=e.wrapInSVG,o=10,c=30,u=r/2-o,m=this.props.innerNobRadius||u/4,d=_extends({},e);l&&(d.transform="translate("+[r/2,r/2]+") ");var p=React.createElement("g",d,React.createElement("g",{className:"stage"},React.createElement("g",null,d3.range(c).map(function(e,r){var a=t.scale(i)>e/(c-1)*360,n=e/(c-1)*360+180,s=[u+5,0],l=a?e/(c-1):0;return React.createElement("rect",{width:5,height:4,key:r,transform:"rotate("+n+") translate("+s+")",style:{fill:"rgba(0, 0, 0, "+l+")"}})})),React.createElement("g",{transform:"rotate("+t.scale(e.value)+")"},React.createElement("circle",{r:u,style:{fill:n,stroke:s,cursor:"move"}}),React.createElement("g",{transform:"translate("+-r/4+",0)"},React.createElement("circle",{r:m,style:{fill:"rgba(0, 0, 0, 0.2)",stroke:"none",cursor:"move"}}),React.createElement("path",{d:"M 8, -2 L -8, -2 M 8, 2 L -8, 2",transform:"rotate("+-t.scale(i)+")",style:{shapeRendering:"crispEdges",pointerEvents:"none",stroke:"rgba(0, 0, 0, 0.1)",strokeWidth:2,fill:"none"}})))));return l?React.createElement("svg",{width:r,height:r,key:"root-1",style:a},p):p}});module.exports=Dial;


},{"babel-runtime/helpers/extends":13,"d3":"d3","react":"react","react/lib/ReactComponentWithPureRenderMixin":25}],3:[function(require,module,exports){
"use strict";function axisStyle(t){t.style("shape-rendering","crispEdges").style("font-size","12px"),t.selectAll("path").style("fill","none").style("stroke","black"),t.selectAll("line").style("fill","none").style("stroke","black")}function tickStyle(t){t.style({"stroke-width":1,stroke:"rgba(0, 0, 0, 0.1)","shape-rendering":"crispEdges"})}function updateTicks(t,e,r,s,a){var n=t.selectAll("line").data(a);n.exit().remove(),n.enter().append("line"),n.attr("x1","x"===e?r:r.range()[0]).attr("y1","x"===e?s.range()[0]:s).attr("x2","x"===e?r:r.range()[1]).attr("y2","x"===e?s.range()[1]:s).call(tickStyle)}var _Object$assign=require("babel-runtime/core-js/object/assign")["default"],d3=require("d3"),React=require("react"),alphaify=require("alphaify"),color=require("color"),puid=require("puid"),utils=require("./utils"),buildNobs=require("./buildNobs"),LeastSquares=React.createClass({displayName:"LeastSquares",sel:function(){return d3.select(this.getDOMNode())},getDefaultProps:function(){return{points:[],betas:[0,1],locationAccessor:function(t){return t.point},colorAccessor:function(t){return t.color},onDragNob:function(){return void 0},mode:"points",showErrorSquares:!0,showNobs:!0,showErrorLines:!0,showRegressionLine:!0,width:410,height:410,margins:{l:30,t:20,r:20,b:30},xAxisLabel:"x",yAxisLabel:"y",svgPadding:50}},getInitialState:function(){var t=this.props,e=t.width,r=t.height,s=t.margins,a=t.svgPadding,n=e,o=r,i=s,p=d3.scale.linear().domain([0,100]).range([i.l,n-i.r]),l=d3.scale.linear().domain([0,100]).range([o-i.b,i.t]),d=function(t){return[p(t[0]),l(t[1])]},c=function(t){return[p.invert(t[0]),l.invert(t[1])]},u={w:n,h:o,m:i,x:p,y:l,xy:d,xyi:c,svgPadding:a};return this._updateStateFromProps(this.props,u)},componentDidMount:function(){var t=this,e=this.state,r=(this.sel(),this.sel().append("svg").attr({width:e.w+2*e.svgPadding,height:e.h+2*e.svgPadding}).style({position:"absolute",left:-e.svgPadding+"px",top:-e.svgPadding+"px","pointer-events":"none"})),s=r.append("defs"),a="gradient-"+puid(),n=s.append("linearGradient").attr({id:a,gradientUnits:"objectBoundingBox",x2:1,y2:0}),o=.1,i="white";n.append("stop").attr("stop-color",i).attr("stop-opacity",0).attr("offset",0),n.append("stop").attr("stop-color",i).attr("stop-opacity",1).attr("offset",o),n.append("stop").attr("stop-color",i).attr("stop-opacity",1).attr("offset",1-o),n.append("stop").attr("stop-color",i).attr("stop-opacity",0).attr("offset",1);var p="gradient-"+puid(),l=s.append("linearGradient").attr({id:p,gradientUnits:"objectBoundingBox",x2:0,y2:1});l.append("stop").attr("stop-color",i).attr("stop-opacity",0).attr("offset",0),l.append("stop").attr("stop-color",i).attr("stop-opacity",1).attr("offset",o),l.append("stop").attr("stop-color",i).attr("stop-opacity",1).attr("offset",1-o),l.append("stop").attr("stop-color",i).attr("stop-opacity",0).attr("offset",1);var d="mask-"+puid();s.append("mask").attr("id",d).append("rect").attr({width:e.w+2*e.svgPadding,height:e.h+2*e.svgPadding,fill:"url(#"+a+")"});var c="mask-"+puid();s.append("mask").attr("id",c).append("rect").attr({width:e.w+2*e.svgPadding,height:e.h+2*e.svgPadding,fill:"url(#"+p+")"});var u=r.append("g").attr("mask","url(#"+d+")"),h=u.append("g").attr("mask","url(#"+c+")"),g=h.append("g").attr("class","stage").attr("transform","translate("+[e.svgPadding,e.svgPadding]+")");g.append("g").call(d3.svg.axis().scale(e.x).ticks(5)).call(axisStyle).attr("transform","translate("+[0,e.y.range()[0]]+")").append("text").attr("transform","translate("+[d3.mean(e.x.range()),35]+")").attr("text-anchor","middle").style("font-size",14).text(this.props.xAxisLabel),g.append("g").call(d3.svg.axis().scale(e.y).orient("left").ticks(5)).call(axisStyle).attr("transform","translate("+e.x.range()[0]+", 0)").append("text").attr("transform","translate(-30,"+d3.mean(e.y.range())+")\n          rotate(-90)").text(this.props.yAxisLabel).style("font-size",14).attr("text-anchor","middle"),g.append("g").attr("class","x-ticks").call(updateTicks,"x",e.x,e.y,e.x.ticks()),g.append("g").attr("class","y-ticks").call(updateTicks,"y",e.x,e.y,e.y.ticks()),this.props.showRegressionLine&&g.append("line").attr("class","line-ols").style("stroke",color.primary),this.props.showErrorLines&&g.append("g").attr("class","error-lines").selectAll("line").data(this.state.errors).enter().append("line").style("stroke",this.props.colorAccessor).style("stroke-width",2).style("stroke-dasharray","2, 2"),this.props.showErrorSquares&&g.append("g").attr("class","error-squares").selectAll("rect").data(this.state.errors).enter().append("rect").style("pointer-events","none").style("fill",function(e,r){return alphaify(t.props.colorAccessor(e.d,r),.2)}),"point"===this.props.mode&&buildNobs(g,this.props.points,"point-nobs").call(d3.behavior.drag().on("drag",function(r,s){var a=e.xyi(d3.mouse(g.node()));a[0]=d3.round(a[0],2),a[1]=d3.round(a[1],2),t._clamp(a),t.props.onDragNob("point",{pos:a,d:r,i:s})})).style("pointer-events","auto"),"regression"===this.props.mode&&buildNobs(g,this.props.regressionPoints,"regression-nobs").style("pointer-events","auto").call(d3.behavior.drag().on("drag",function(r,s){var a=e.xyi(d3.mouse(g.node()));a[0]=d3.round(a[0],2),a[1]=d3.round(a[1],2),t._clamp(a),t.props.onDragNob("regression",{pos:a,d:r,i:s})})),g.append("g").attr("class","points").selectAll("g").data(this.props.points).enter().append("g").append("circle").attr("r",4).style("fill",this.props.colorAccessor).style("pointer-events","none"),this._updateDOM()},componentWillReceiveProps:function(t){this.setState(this._updateStateFromProps(t)),this._updateDOM()},shouldComponentUpdate:function(t){var e=t.points!==this.props.points||t.regressionPoints!==this.props.regressionPoints||t.betas!==this.props.betas||t.betas&&this.props.betas&&(t.betas[0]!==this.props.betas[0]||t.betas[1]!==this.props.betas[1]);return e},_clamp:function(t){var e=this.state.x,r=this.state.y;return t[0]=Math.max(e.domain()[0],Math.min(e.domain()[1],t[0])),t[1]=Math.max(r.domain()[0],Math.min(r.domain()[1],t[1])),t},_updatePoints:function(){var t=this.props,e=t.locationAccessor,r=t.points,s=this.state.xy;this.sel().select(".points").selectAll("g").data(r).attr("transform",function(t){return"translate("+s(e(t))+")"})},_updateTrendLine:function(){var t=this.state,e=t.x,r=t.y,s=(t.req,t.rs),a=[e.domain()[0],s(e.domain()[0])],n=[e.domain()[1],s(e.domain()[1])];a[1]<r.domain()[0]?a=[s.invert(r.domain()[0]),r.domain()[0]]:a[1]>r.domain()[1]&&(a=[s.invert(r.domain()[1]),r.domain()[1]]),n[1]<r.domain()[0]?n=[s.invert(r.domain()[0]),r.domain()[0]]:n[1]>r.domain()[1]&&(n=[s.invert(r.domain()[1]),r.domain()[1]]),this.sel().select(".line-ols").attr({x1:e(a[0]),y1:r(a[1]),x2:e(n[0]),y2:r(n[1])})},_updateNobs:function(){var t=this.state,e=this.props,r=t.xy,s=e.locationAccessor,a=e.points,n=e.regressionPoints,o=e.showNobs;this.sel().select(".point-nobs").selectAll(".nob").data(a).attr("transform",function(t){return"translate("+r(s(t))+")"}).style({opacity:o?1:0,"pointer-events":o?"auto":"none"}),n&&this.sel().select(".regression-nobs").selectAll(".nob").data(n).attr("transform",function(e){return"translate("+t.xy(e)+")"})},_updateErrors:function(){var t=this.state,e=this.props,r=t.errors,s=t.x,a=t.y,n=t.reg,o=t.xy,i=e.locationAccessor;this.sel().select(".error-lines").selectAll("line").data(r).attr({x1:function(t){return s(i(t.d)[0])},x2:function(t){return s(i(t.d)[0])},y1:function(t){return a(i(t.d)[1])},y2:function(t){return a(i(t.d)[1]+t.err)}}),this.sel().select(".error-squares").selectAll("rect").data(r).attr("transform",function(t){return"translate("+o(i(t.d))+")"}).attr({x:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(t){return n.b>0&&t.err<0?s(i(t.d)[1]+t.err)-s(i(t.d)[1]):0}),y:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(t){return t.err<0?0:a(i(t.d)[1]+t.err)-a(i(t.d)[1])}),width:function(t){return Math.abs(s(i(t.d)[1]+t.err)-s(i(t.d)[1]))},height:function(t){return Math.abs(a(i(t.d)[1]+t.err)-a(i(t.d)[1]))}})},_updateStateFromProps:function(t,e){e=e||this.state;var r,s=(e.x,e.y,this.props.locationAccessor);r="point"===t.mode?this.props.betas?{a:this.props.betas[0],b:this.props.betas[1]}:utils.ols(this.props.points,s):function(){var e=t.regressionPoints[0][0],r=t.regressionPoints[0][1],s=t.regressionPoints[1][0],a=t.regressionPoints[1][1],n=a-r,o=s-e;Math.abs(o)<1e-6&&(o=1);var i=n/o,p=-i*e+r;return{a:p,b:i}}();var a=d3.scale.linear().domain([0,1]).range([r.a,r.a+1*r.b]);return e.errors=t.points.map(function(t){var e=s(t);return{err:a(e[0])-e[1],d:t}}),e.reg=r,e.rs=a,e},_updateDOM:function(){this._updateTrendLine(),this._updatePoints(),this._updateNobs(),this._updateErrors()},render:function(){var t=_Object$assign({width:this.state.w+"px",height:this.state.h+"px",position:"relative"},this.props.style||{});return React.createElement("div",{style:t})}});module.exports=LeastSquares;


},{"./buildNobs":9,"./utils":11,"alphaify":"alphaify","babel-runtime/core-js/object/assign":12,"color":"color","d3":"d3","puid":"puid","react":"react"}],4:[function(require,module,exports){
"use strict";var React=require("react"),d3=require("d3"),color=require("color"),utils=require("./utils"),LeastSquares=require("./LeastSquares.react"),OLS3D=require("./OLS3D.react"),Dial=require("./Dial.react"),style=require("./style"),LeastSquares3DModule=React.createClass({displayName:"LeastSquares3DModule",getInitialState:function(){var e=d3.scale.category10(),t=[[16,10,5],[13,30,23],[24,20,33],[43,44,32],[51,52,53],[84,71,65],[90,80,85]].map(function(t,s){return{point:t,color:e(s)}}),s={points:t,width:205,height:205,dialHeight:100,betas:this._getBetas(t),regressionPoints:{x1:[[20,20],[80,80]],x2:[[20,20],[80,80]]},regressionBetas:[50,0,0],regressionPlaneNob:{pos:[0,0,0],rot:[0,0,0]}};return s},_locationAccessorX1Y:function(e){return[e.point[0],e.point[1]]},_locationAccessorX2Y:function(e){return[e.point[2],e.point[1]]},_onDragPoint3:function(e,t){t.point=e,this.setState({points:this.state.points.slice(0)})},_onDragPointX1Y:function(e,t){var s=[t.pos[0],t.pos[1],t.d.point[2]];"point"===e&&this._updatePoint(t.d,s)},_onDragPointX2Y:function(e,t){var s=[t.d.point[0],t.pos[1],t.pos[0]];"point"===e&&this._updatePoint(t.d,s)},_getBetas:function(e){var t=e.map(function(e){return[e.point[0],e.point[2]]}),s=e.map(function(e){return e.point[1]});return utils.hessian(s,t)},_updatePoint:function(e,t){var s=this.state.points.slice(0);e.point=t,this.setState({points:s,betas:this._getBetas(s)})},_updateRegressionBeta:function(e,t){var s=this.state.regressionBetas.slice();s[e]=t,this.setState({regressionBetas:s})},_updateRegressionBeta0:function(e){this._updateRegressionBeta(0,e)},_updateRegressionBeta1:function(e){this._updateRegressionBeta(1,e)},_updateRegressionBeta2:function(e){this._updateRegressionBeta(2,e)},_renderDial:function(e){var t=this.state.dialHeight,s=60,a=t/2+6,i=t/2;return React.createElement("g",null,React.createElement("text",{transform:"translate("+e.posX+", "+a+")",textAnchor:"middle",style:style.dialFontSmall},d3.format(".2f")(this.state.regressionBetas[e.betaIndex])),React.createElement(Dial,{transform:"translate("+e.posX+", "+i+")",min:e.min,max:e.max,size:s,innerNobRadius:s/4,value:this.state.regressionBetas[e.betaIndex],onChangeValue:this["_updateRegressionBeta"+e.betaIndex],wrapInSVG:!1}))},_renderDials:function(){var e=this.state.dialHeight,t=[75,115,155,190,305,350,385,490],s=e/2+8;return React.createElement("svg",{width:620,height:e,style:style.dialDemo},this._renderDial({posX:t[0],betaIndex:0,min:-100,max:100}),React.createElement("text",{transform:"translate("+t[1]+", "+s+")",textAnchor:"middle",style:style.dialFont}," + "),this._renderDial({posX:t[2],betaIndex:1,min:-5,max:5}),React.createElement("text",{transform:"translate("+t[3]+","+s+")",textAnchor:"start",style:style.dialFont}," * hand size "),React.createElement("text",{transform:"translate("+t[4]+","+s+")",textAnchor:"middle",style:style.dialFont}," + "),this._renderDial({posX:t[5],betaIndex:2,min:-5,max:5}),React.createElement("text",{transform:"translate("+t[6]+","+s+")",textAnchor:"start",style:style.dialFont}," * hand size "),React.createElement("text",{transform:"translate("+t[7]+","+s+")",textAnchor:"start",style:style.dialFont}," = height "))},render:function(){var e={l:20,t:20,r:20,b:20},t=this.state,s=t.width,a=t.height,i=t.betas;return React.createElement("div",null,React.createElement("section",{key:"ls3d-1",style:{clear:"both",padding:0,marginBottom:60}},React.createElement("p",null,"Now, real scientists and even sociologists rarely do regression with just one independent variable, but OLS works exactly the same with more. Below is OLS with two independent variables. Instead of the errors being relative to a line, though, they're now relative to a plane in 3D space. So now the job of OLS is to find the equation for that plane. The slice of the plane through each axis is shown in the first two figures."),React.createElement(LeastSquares,{key:"least-squares-x1-y",width:s,height:a,margins:e,betas:[i[0],i[1]],mode:"point",xAxisLabel:"x1",yAxisLabel:"y",showErrorSquares:!1,showErrorLines:!1,showRegressionLine:!0,points:this.state.points,locationAccessor:this._locationAccessorX1Y,onDragNob:this._onDragPointX1Y,style:{"float":"left"}}),React.createElement(LeastSquares,{key:"least-squares-x2-y",width:s,height:a,margins:e,betas:[i[0],i[2]],mode:"point",xAxisLabel:"x2",yAxisLabel:"",showErrorSquares:!1,showErrorLines:!1,showRegressionLine:!0,points:this.state.points,locationAccessor:this._locationAccessorX2Y,onDragNob:this._onDragPointX2Y,style:{"float":"left"}}),React.createElement(OLS3D,{width:s,height:a,showPointNobs:!1,regressionPlaneColor:color.primary,key:"least-squares-x1-x2-y",points:this.state.points,onDragPoint:this._onDragPoint3,style:{"float":"left"}}),React.createElement("div",{style:{clear:"both"}})),React.createElement("section",{key:"ls3d-2",style:{padding:0,clear:"both",marginBottom:60}},React.createElement("p",null,"By playing with the dots, you can see that, when there are multiple variables involved, the true relationships can be very counterintuitive. That's why we have statistics: to make us unsure about things."),React.createElement("p",null,"Below, see if you can choose the betas to minimize the sum of squared errors."),React.createElement("p",null,"There are many other prediction techniques much more complicated than OLS, like logistic regression, weighted least-squares regression, robust regression and the growing family of non-parametric methods."),this._renderDials(),React.createElement(LeastSquares,{key:"least-squares-x1-y-basis",width:s,height:a,margins:e,betas:[this.state.regressionBetas[0],this.state.regressionBetas[1]],mode:"point",xAxisLabel:"x1",yAxisLabel:"y",showErrorSquares:!1,showErrorLines:!1,showRegressionLin:!0,showNobs:!1,points:this.state.points,locationAccessor:this._locationAccessorX1Y,onDragNob:this._onDragPointX1Y,style:{"float":"left"}}),React.createElement(LeastSquares,{key:"least-squares-x2-y-basis",width:s,height:a,betas:[this.state.regressionBetas[0],this.state.regressionBetas[2]],mode:"point",margins:e,xAxisLabel:"x2",yAxisLabel:"",showErrorSquares:!1,showErrorLines:!1,showRegressionLine:!0,showNobs:!1,points:this.state.points,locationAccessor:this._locationAccessorX2Y,onDragNob:this._onDragPointX2Y,style:{"float":"left"}}),React.createElement(OLS3D,{key:"least-squares-x1-x2-y",width:s,height:a,showPointNobs:!1,regressionNob:this.state.regressionNob,regressionPlaneColor:color.primary,betas:this.state.regressionBetas,points:this.state.points,onDragPoint:this._onDragPoint3,style:{"float":"left"}}),React.createElement("div",{style:{clear:"both"}})))}});module.exports=LeastSquares3DModule;


},{"./Dial.react":2,"./LeastSquares.react":3,"./OLS3D.react":6,"./style":10,"./utils":11,"color":"color","d3":"d3","react":"react"}],5:[function(require,module,exports){
"use strict";var d3=require("d3"),React=require("react"),PureRenderMixin=require("react/lib/ReactComponentWithPureRenderMixin"),MasonicSquares=React.createClass({displayName:"MasonicSquares",mixins:[PureRenderMixin],sel:function(){return d3.select(this.getDOMNode())},getDefaultProps:function(){return{valueAccessor:function(t){return t.value},colorAccessor:function(t){return t.color}}},getInitialState:function(){return this._updateStateFromProps(this.props,{})},_updateStateFromProps:function(t,e){var t=this.props,r=d3.masonic().width(function(t){return t.width}).height(function(t){return t.height}).columnWidth(1).outerWidth(t.width).reset();return e.wrappedData=t.data.map(function(e,n){var i=4*Math.sqrt(t.valueAccessor(e)),o=r({width:i,height:i});return o.id=n,o.color=t.colorAccessor(e),delete o.data,o}),e},componentWillReceiveProps:function(t){this.setState(this._updateStateFromProps(t,this.state))},componentDidMount:function(){this._redraw()},componentDidUpdate:function(){this._redraw()},_redraw:function(){var t=this.sel().selectAll("rect").data(this.state.wrappedData);t.enter().append("rect"),t.exit().remove(),t.transition().ease("cubic-out").style("fill",function(t){return t.color}).attr({x:function(t){return t.x},y:function(t){return t.y},width:function(t){return t.width},height:function(t){return t.height}})},render:function(){var t=this.props,e=t.width,r=t.height,n=t.style;return React.createElement("svg",{width:e,height:r,style:n})}});module.exports=MasonicSquares;


},{"d3":"d3","react":"react","react/lib/ReactComponentWithPureRenderMixin":25}],6:[function(require,module,exports){
"use strict";var _Object$assign=require("babel-runtime/core-js/object/assign")["default"],assert=require("assert"),THREE=require("three");assert(THREE.OrbitControls,"THREE.OrbitControls not yet set");var d3=require("d3"),React=require("react"),color=require("color"),utils=require("./utils"),buildNobs=require("./buildNobs"),OLS3D=React.createClass({displayName:"OLS3D",sel:function(){return d3.select(this.getDOMNode())},getDefaultProps:function(){return{width:500,height:400,errorSquareColor:color.primary,regressionPlaneColor:color.secondary,pointSize:.015,valueAccessor:function(e){return e.value},colorAccessor:function(e){return e.color},locationAccessor:function(e){return e.point},onDragPoint:function(){return void 0},regressionNob:null,showPointNobs:!0,betas:null}},getInitialState:function(){var e=new THREE.Scene,t=new THREE.WebGLRenderer({alpha:!0,antialias:!0}),o={betas:[0,0,0],scene:e,renderer:t,materials:{},geometries:{},objects:{},xScale:d3.scale.linear().domain([0,100]).range([-.5,.5]),yScale:d3.scale.linear().domain([0,100]).range([-.5,.5]),zScale:d3.scale.linear().domain([0,100]).range([-.5,.5])};return this._updateStateFromProps(this.props,o)},_updateStateFromProps:function(e,t){t=t||this.state,t.renderer.setSize(e.width,e.height),t.renderer.setPixelRatio(window.devicePixelRatio);var o=e.points.map(function(e){return[e.point[0],e.point[2]]}),s=e.points.map(function(e){return e.point[1]});return t.betas=e.betas||utils.hessian(s,o),this._updateNobData(e,t),t},_mouseToDevice:function(e){var t=[];return t[0]=e[0]/this.props.width*2-1,t[1]=2*-(e[1]/this.props.height)+1,t},_deviceToMouse:function(e){var t=[];return t[0]=(e[0]+1)/2*this.props.width,t[1]=-(e[1]-1)/2*this.props.height,t},_getPrediction:function(e,t){var o=this.state;return o.betas[0]+o.betas[1]*e+o.betas[2]*t},componentDidMount:function(){var e=this,t=this.props,o=_Object$assign({},this.state),s=t.width/t.height,r=d3.select(o.renderer.domElement);this.sel().node().appendChild(r.node()),r.on("mousedown",this._onMouseDown).on("mousemove",this._onMouseMove).on("mouseup",this._onMouseUp).style({position:"absolute",left:"0px",top:"0px"});var n=this.sel().append("svg").attr({width:t.width,height:t.height}).style({position:"absolute",left:"0px",top:"0px"}).style("pointer-events","none").attr("class","overlay"),i=new THREE.PerspectiveCamera(75,s,.1,1e3);i.setLens(50),o.objects.camera=i;var a=new THREE.Vector3(0,0,3.3);a.applyAxisAngle(new THREE.Vector3(0,1,0),0),o.objects.camera.position.copy(a),o.objects.camera.lookAt(new THREE.Vector3(0,0,0));var c=new THREE.OrbitControls(i,o.renderer.domElement);c.noZoom=!0,c.noPan=!0,c.autoRotateSpeed=1,c.autoRotate=!0,o.objects.controls=c,c.addEventListener("change",function(){e._updateNobData(t,e.state),e._updateNobs()});var p=new THREE.Mesh(new THREE.PlaneBufferGeometry(10,10,8,8),new THREE.MeshBasicMaterial({color:0,opacity:.25,transparent:!0}));p.visible=!1,o.scene.add(p),o.objects.intersectPlane=p,o.objects.raycaster=new THREE.Raycaster,this._setupGrid(o),this._setupGridLabels(o),o.objects.pointGroup=new THREE.Object3D,o.scene.add(o.objects.pointGroup),o.geometries.point=new THREE.SphereGeometry(t.pointSize,32,32),this._setupRegressionPlane(o),this._setupErrorLines(o),this._setupErrorSquares(o),this._updateNobData(t,o),buildNobs(n,o.pointNobData,"point-nobs").call(d3.behavior.drag().on("dragstart",this._onDragStart).on("drag",this._onDrag).on("dragend",this._onDragEnd)).style("pointer-events","auto"),this.setState(o),this._updateScene(),this._renderScene(),this._updateNobData(t,e.state),this._updateNobs();{var l,u=0;Math.PI/8}d3.timer(function(t){l=t-u,u=t,e._renderScene()})},componentWillReceiveProps:function(e){this.setState(this._updateStateFromProps(e))},shouldComponentUpdate:function(e,t){var o=!!(e.points!==this.props.points||e.betas&&e.betas!==this.props.betas);return o},componentDidUpdate:function(){this._updateScene(),this._renderScene()},_setupGrid:function(e){var t=.5,o=.1,s=new THREE.GridHelper(t,o),r=0,n=16185078,i=1;s.position.y=-.5,s.setColors(r,n),s.material.opacity=i,e.scene.add(s),e.objects.gridHelperX=s,s=new THREE.GridHelper(t,o),s.position.x=-.5,s.rotation.z=Math.PI/2,s.setColors(r,n),s.material.opacity=i,e.scene.add(s),e.objects.gridHelperY=s,s=new THREE.GridHelper(t,o),s.position.z=-.5,s.rotation.x=Math.PI/2,s.setColors(r,n),s.material.opacity=i,e.scene.add(s),e.objects.gridHelperZ=s},_setupGridLabels:function(e){function t(e,t,o,s){var r=document.createElement("canvas"),n=256,i=256;r.width=n,r.height=i;var a=r.getContext("2d");a.fillStyle="rgba(0,0,0,1)",a.font="100 30px Lato, sans-serif",a.textAlign="center",a.fillText(s,n/2,i/2+22);var c=new THREE.Texture(r);c.needsUpdate=!0;var p=new THREE.SpriteMaterial({map:c,color:16777215}),l=new THREE.Sprite(p);return l.scale.set(.5,.5,1),l.position.x=e,l.position.y=t,l.position.z=o,l}var o=new THREE.Object3D;d3.range(6).map(function(s){var r=20*s,n=e.xScale(r),i=e.yScale(0)-.05,a=e.zScale(0)-.05;o.add(t(n,i,a,r))}),d3.range(5).map(function(s){var r=20*s+20,n=e.xScale(0)-.05,i=e.yScale(0)-.05,a=e.zScale(r);o.add(t(n,i,a,r))}),d3.range(5).map(function(s){var r=20*s+20,n=e.xScale(0)-.05,i=e.yScale(r),a=e.zScale(0)-.05;o.add(t(n,i,a,r))}),e.objects.gridLabelGroup=o,e.scene.add(o)},_setupRegressionPlane:function(e){var t=e.geometries.plane=new THREE.Geometry;t.dynamic=!0,t.vertices.push(new THREE.Vector3(-.5,0,-.5)),t.vertices.push(new THREE.Vector3(.5,0,-.5)),t.vertices.push(new THREE.Vector3(.5,0,.5)),t.vertices.push(new THREE.Vector3(-.5,0,.5)),t.faces.push(new THREE.Face3(0,1,2)),t.faces.push(new THREE.Face3(2,3,0));var o=e.materials.plane=new THREE.MeshBasicMaterial({color:new THREE.Color(this.props.regressionPlaneColor).getHex(),side:THREE.DoubleSide,transparent:!0,depthTest:!0,opacity:.2});e.scene.add(e.objects.plane=new THREE.Mesh(t,o))},_setupErrorLines:function(e){var t=(e.materials,e.geometries,e.materials.errorLines=new THREE.LineBasicMaterial({color:16711680})),o=e.geometries.errorLines=new THREE.Geometry;o.dynamic=!0,e.objects.errorLines=new THREE.Line(o,t,THREE.LinePieces),e.scene.add(e.objects.errorLines)},_setupErrorSquares:function(e){e.objects.errorSquaresGroup=new THREE.Object3D,e.scene.add(e.objects.errorSquaresGroup)},_updatePoints:function(){var e=this.props.points,t=this.state,o=t.objects.pointGroup;o.children.forEach(function(e){o.remove(e),e.material.dispose()}),e.forEach(function(e){var s=new THREE.MeshBasicMaterial({color:new THREE.Color(this.props.colorAccessor(e)).getHex()}),r=new THREE.Mesh(this.state.geometries.point,s);r.position.x=t.xScale(e.point[0]),r.position.y=t.yScale(e.point[1]),r.position.z=t.zScale(e.point[2]),r.userData=e,o.add(r)},this)},_updateNobs:function(){var e=this;this.sel().select(".overlay").select(".point-nobs").selectAll(".nob").data(this.state.pointNobData).attr("transform",function(t){return"translate("+e._deviceToMouse(t.pos)+")"})},_updateErrorLines:function(){var e=this.state,t=e.geometries.errorLines;t.vertices.splice(0,t.vertices.length),this.props.points.forEach(function(o){var s=e.xScale(o.point[0]),r=e.yScale(o.point[1]),n=e.zScale(o.point[2]),i=e.yScale(this._getPrediction(o.point[0],o.point[2]));t.vertices.push(new THREE.Vector3(s,r,n)),t.vertices.push(new THREE.Vector3(s,i,n))},this),t.verticesNeedUpdate=!0,t.computeLineDistances()},_updateErrorSquares:function(){var e=this.state,t=e.objects.errorSquaresGroup;t.children.forEach(function(e){t.remove(e),e.geometry.dispose(),e.material.dispose()}),this.props.points.forEach(function(o){var s=new THREE.Geometry,r=new THREE.MeshBasicMaterial({color:new THREE.Color(this.props.colorAccessor(o)).getHex(),side:THREE.DoubleSide,trasparent:!0,depthTest:!0,opacity:.8}),n=e.xScale(o.point[0]),i=e.yScale(o.point[1]),a=e.zScale(o.point[2]),c=e.yScale(this._getPrediction(o.point[0],o.point[2])),p=Math.abs(c-i);s.vertices.push(new THREE.Vector3(n,i,a)),s.vertices.push(new THREE.Vector3(n,c,a)),s.vertices.push(new THREE.Vector3(n+p,c,a)),s.vertices.push(new THREE.Vector3(n+p,i,a)),s.faces.push(new THREE.Face3(0,1,2)),s.faces.push(new THREE.Face3(0,2,3)),t.add(new THREE.Mesh(s,r))},this)},_updateRegressionPlane:function(){for(var e=this.state,t=e.geometries.plane.vertices,o=e.betas,s=0;4>s;s++)t[s].y=e.yScale(o[0]+o[1]*e.xScale.invert(t[s].x)+o[2]*e.zScale.invert(t[s].z));this.state.geometries.plane.verticesNeedUpdate=!0},_updateScene:function(){this._updatePoints(),this._updateNobs(),this._updateErrorLines(),this._updateErrorSquares(),this._updateRegressionPlane()},_updateNobData:function(e,t){var o=t.objects.camera;o&&e.showPointNobs?t.pointNobData=e.points.map(function(e,s){var r=[t.xScale(e.point[0]),t.yScale(e.point[1]),t.zScale(e.point[2])],n=(new THREE.Vector3).fromArray(r).project(o).toArray().slice(0,2);return{pos:n,datum:e}}):t.pointNobData=[]},_onDragStart:function(e,t){var o=this.state,s=o.objects.intersectPlane,r=(this._mouseToDevice(d3.mouse(this.sel().node())),this.state.objects.camera);o.objects.controls.enabled=!1,o.objects.controls.autoRotate=!1,s.position.fromArray([o.xScale(e.datum.point[0]),o.yScale(e.datum.point[1]),o.zScale(e.datum.point[2])]),s.lookAt(r.position)},_onDrag:function(e,t){var o,s,r=this.state.objects.intersectPlane,n=new THREE.Vector2;return n.fromArray(this._mouseToDevice(d3.mouse(this.sel().node()))),this.state.objects.raycaster.setFromCamera(n,this.state.objects.camera),o=this.state.objects.raycaster.intersectObject(r),o.length?(s=o[0].point.toArray(),s[0]=this.state.xScale.invert(s[0]),s[1]=this.state.yScale.invert(s[1]),s[2]=this.state.zScale.invert(s[2]),void this.props.onDragPoint(s,e.datum)):void console.warn("warning: intersect plane on hit in mouse move")},_onDragEnd:function(){this.state.objects.controls.enabled=!0},_onMouseDown:function(){this.state.objects.controls.autoRotate=!1},_onMouseMove:function(){},_onMouseUp:function(){},_renderScene:function(){var e=this.state;e.objects.controls.update(),e.renderer.render(e.scene,e.objects.camera)},render:function(){var e=_Object$assign({width:this.props.width,height:this.props.height,position:"relative"},this.props.style||{});return React.createElement("div",{style:e})}});module.exports=OLS3D;


},{"./buildNobs":9,"./utils":11,"assert":20,"babel-runtime/core-js/object/assign":12,"color":"color","d3":"d3","react":"react","three":"three"}],7:[function(require,module,exports){
"use strict";var d3=require("d3"),React=require("react"),style=require("./style"),utils=require("./utils"),Dial=require("./Dial.react"),LeastSquares=require("./LeastSquares.react"),MasonicSquares=require("./MasonicSquares.react"),RegressionAsNobsModule=React.createClass({displayName:"RegressionAsNobsModule",getDefaultProps:function(){return{onDragOLSNob:function(){return void 0},points:null}},getInitialState:function(){return this._updateStateFromProps(this.props,{betas:[0,1]})},_updateStateFromProps:function(t,e){var a=t.points,s=utils.wrapLeastSquaresErrors(a,function(t){return t.point},e.betas);return e.leastSquaresErrors=s,e},_updateBetas:function(t){var e=this.props.points,a=utils.wrapLeastSquaresErrors(e,function(t){return t.point},t);this.setState({betas:t,leastSquaresErrors:a})},componentWillReceiveProps:function(t){this.setState(this._updateStateFromProps(t,this.state))},_onChangeDialValueB0:function(t){var e=this.state.betas;e[0]=t,this._updateBetas(e)},_onChangeDialValueB1:function(t){var e=this.state.betas;e[1]=t,this._updateBetas(e)},render:function(){var t=120;return React.createElement("section",{style:{padding:0,marginBottom:40}},React.createElement("svg",{width:620,height:t,style:style.dialDemo},React.createElement("text",{transform:"translate(100, "+(t/2+8)+")",textAnchor:"middle",style:style.dialFont},d3.format(".2f")(this.state.betas[0])),React.createElement(Dial,{min:-100,max:100,transform:"translate(100, "+t/2+")",value:this.state.betas[0],onChangeValue:this._onChangeDialValueB0,wrapInSVG:!1}),React.createElement("text",{transform:"translate(200, "+(t/2+8)+")",textAnchor:"middle",style:style.dialFont}," + "),React.createElement("text",{transform:"translate(300, "+(t/2+8)+")",textAnchor:"middle",style:style.dialFont},d3.format(".2f")(this.state.betas[1])),React.createElement(Dial,{min:-5,max:5,transform:"translate(300, "+t/2+")",value:this.state.betas[1],onChangeValue:this._onChangeDialValueB1,wrapInSVG:!1}),React.createElement("text",{transform:"translate(370, "+(t/2+8)+")",textAnchor:"start",style:style.dialFont}," * hand size = height")),React.createElement("div",{style:{clear:"both"}},React.createElement(LeastSquares,{width:310,height:310,style:{"float":"left"},points:this.props.points,betas:this.state.betas,colorAccessor:function(t){return t.color},onDragNob:this.props.onDragOLSNob,mode:"point",showErrorSquares:!0,showNobs:!1,key:"least-squares-without-squares"}),React.createElement(MasonicSquares,{style:{"float":"left"},width:310,height:310,data:this.state.leastSquaresErrors,valueAccessor:this.props.leastSquaresValueAccessor,colorAccessor:this.props.leastSquaresColorAccessor})),React.createElement("div",{style:{clear:"both"}}))}});module.exports=RegressionAsNobsModule;


},{"./Dial.react":2,"./LeastSquares.react":3,"./MasonicSquares.react":5,"./style":10,"./utils":11,"d3":"d3","react":"react"}],8:[function(require,module,exports){
"use strict";var d3=require("d3"),React=require("react"),PureRenderMixin=require("react/lib/ReactComponentWithPureRenderMixin"),alphaify=require("alphaify"),color=require("color"),SLRParameters=React.createClass({displayName:"SLRParameters",mixins:[PureRenderMixin],componentDidMount:function(){this._DOMWasUpdated()},componentDidUpdate:function(){this._DOMWasUpdated()},_DOMWasUpdated:function(){var e=this.getDOMNode().getBoundingClientRect(),t=this.refs.beta1Text.getDOMNode(),r=t.getClientRects()[0],a=(t.getComputedTextLength(),{x:r.left+r.width/2-e.left,y:r.top+r.height/2-e.top}),n=this.refs.beta2Text.getDOMNode(),i=n.getClientRects()[0],l=(n.getComputedTextLength(),{x:i.left+i.width/2-e.left,y:i.top+i.height/2-e.top});d3.select(this.refs.beta1Highlight.getDOMNode()).attr("transform","translate("+a.x+", "+a.y+")"),d3.select(this.refs.beta2Highlight.getDOMNode()).attr("transform","translate("+l.x+", "+l.y+")")},render:function(){return React.createElement("svg",{width:310,height:310},React.createElement("g",{ref:"beta1Highlight"},React.createElement("circle",{r:25,style:{fill:alphaify(color.primary,.5)}}),React.createElement("line",{x1:0,y1:-25,x2:0,y2:-50,style:{stroke:color.primary}})),React.createElement("g",{ref:"beta2Highlight"},React.createElement("circle",{r:25,style:{fill:alphaify(color.secondary,.5)}}),React.createElement("line",{x1:0,y1:25,x2:0,y2:50,style:{stroke:color.secondary}})),React.createElement("g",{transform:"translate(160, 160)"},React.createElement("text",{transform:"translate(-20, -60)",textAnchor:"middle",fontSize:12,fill:color.primary},"Beta 1 - The y-intercept of the regression line."),React.createElement("text",{transform:"translate(-20, 60)",textAnchor:"middle",fontSize:12,fill:color.secondary},"Beta 2 - The slope of the regression line."),React.createElement("text",{ref:"equation",transform:"translate(0, 0)",textAnchor:"middle",fontSize:"20px"},React.createElement("tspan",{ref:"beta1Text"},d3.format(".2f")(this.props.betas[0])),React.createElement("tspan",null," + "),React.createElement("tspan",{ref:"beta2Text"},d3.format(".2f")(this.props.betas[1])),React.createElement("tspan",null," * hand size = height"))))}});module.exports=SLRParameters;


},{"alphaify":"alphaify","color":"color","d3":"d3","react":"react","react/lib/ReactComponentWithPureRenderMixin":25}],9:[function(require,module,exports){
"use strict";module.exports=function(t,e,n){function a(t){t.transition().duration(1e3).ease("ease-out").attr({r:25}).style({fill:"rgba(0, 0, 0, 0.2)"}).transition().ease("ease-in").duration(1e3).attr({r:20}).style({fill:"rgba(0, 0, 0, 0.1)"}).each("end",function(){return a(d3.select(this))})}var r=t.append("g").attr("class",n).selectAll(".nob").data(e||[]).enter().append("g").attr("class","nob"),l=r.append("circle").attr("r",20);return l.call(a).on("mousedown",function(){d3.selectAll(".nob").select("circle").transition().each("end",null).transition().duration(1e3).ease("ease-out").attr({r:20}).style({fill:"rgba(0, 0, 0, 0.1)"})}),r};


},{}],10:[function(require,module,exports){
"use strict";var style=module.exports={dialDemoStyle:{backgroundColor:"rgba(0, 0, 0, 0)"},dialFont:{pointerEvents:"none",fontSize:20},dialFontSmall:{pointerEvents:"none",fontSize:14},tutorialVideo:{boxShadow:"2px 2px 5px rgba(0, 0, 0, 0.2)"}};


},{}],11:[function(require,module,exports){
"use strict";var numeric=require("numeric"),utils=module.exports={ols:function(r,n){var e=r.map(n||function(r){return r}),t=d3.mean(e,function(r){return r[0]}),u=d3.mean(e,function(r){return r[1]}),a=e.reduce(function(r,n){return r+(n[0]-t)*(n[1]-u)},0),i=e.reduce(function(r,n){return r+Math.pow(n[0]-t,2)},0),o=a/i,c=u-o*t;return{a:c,b:o}},hessian:function(r,n){var e,t=n.length,u=(n[0].length+1,[]);for(e=0;t>e;e++)u[e]=[1].concat(n[e]);var a=numeric.transpose(u),i=numeric.dot(a,u);return numeric.dot(numeric.dot(numeric.inv(i),a),r)},wrapLeastSquaresErrors:function(r,n,e){var t=e?{a:e[0],b:e[1]}:utils.ols(r,n),u=d3.scale.linear().domain([0,1]).range([t.a,t.a+1*t.b]);return r.map(function(r){var e=n(r),t=Math.abs(u(e[0])-e[1]);return t*=t,{error:t,d:r}})}};


},{"numeric":"numeric"}],12:[function(require,module,exports){
module.exports={"default":require("core-js/library/fn/object/assign"),__esModule:!0};


},{"core-js/library/fn/object/assign":14}],13:[function(require,module,exports){
"use strict";var _Object$assign=require("babel-runtime/core-js/object/assign")["default"];exports["default"]=_Object$assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])}return e},exports.__esModule=!0;


},{"babel-runtime/core-js/object/assign":12}],14:[function(require,module,exports){
require("../../modules/es6.object.assign"),module.exports=require("../../modules/$").core.Object.assign;


},{"../../modules/$":18,"../../modules/es6.object.assign":19}],15:[function(require,module,exports){
var $=require("./$");module.exports=Object.assign||function(e,r){for(var t=Object($.assertDefined(e)),n=arguments.length,s=1;n>s;)for(var a,g=$.ES5Object(arguments[s++]),u=$.getKeys(g),o=u.length,c=0;o>c;)t[a=u[c++]]=g[a];return t};


},{"./$":18}],16:[function(require,module,exports){
function ctx(e,n){return function(){return e.apply(n,arguments)}}function $def(e,n,o){var t,f,i,r,c=e&$def.G,d=c?global:e&$def.S?global[n]:(global[n]||{}).prototype,u=c?core:core[n]||(core[n]={});c&&(o=n);for(t in o)f=!(e&$def.F)&&d&&t in d,f&&t in u||(i=f?d[t]:o[t],c&&!isFunction(d[t])?r=o[t]:e&$def.B&&f?r=ctx(i,global):e&$def.W&&d[t]==i?!function(e){r=function(n){return this instanceof e?new e(n):e(n)},r.prototype=e.prototype}(i):r=e&$def.P&&isFunction(i)?ctx(Function.call,i):i,$.hide(u,t,r))}var $=require("./$"),global=$.g,core=$.core,isFunction=$.isFunction;$def.F=1,$def.G=2,$def.S=4,$def.P=8,$def.B=16,$def.W=32,module.exports=$def;


},{"./$":18}],17:[function(require,module,exports){
module.exports=function(e){return e.FW=!1,e.path=e.core,e};


},{}],18:[function(require,module,exports){
"use strict";function toInteger(e){return isNaN(e=+e)?0:(e>0?floor:ceil)(e)}function desc(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}function simpleSet(e,t,n){return e[t]=n,e}function createDefiner(e){return DESC?function(t,n,r){return $.setDesc(t,n,desc(e,r))}:simpleSet}function isObject(e){return null!==e&&("object"==typeof e||"function"==typeof e)}function isFunction(e){return"function"==typeof e}function assertDefined(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}var global="undefined"!=typeof self?self:Function("return this")(),core={},defineProperty=Object.defineProperty,hasOwnProperty={}.hasOwnProperty,ceil=Math.ceil,floor=Math.floor,max=Math.max,min=Math.min,DESC=!!function(){try{return 2==defineProperty({},"a",{get:function(){return 2}}).a}catch(e){}}(),hide=createDefiner(1),$=module.exports=require("./$.fw")({g:global,core:core,html:global.document&&document.documentElement,isObject:isObject,isFunction:isFunction,it:function(e){return e},that:function(){return this},toInteger:toInteger,toLength:function(e){return e>0?min(toInteger(e),9007199254740991):0},toIndex:function(e,t){return e=toInteger(e),0>e?max(e+t,0):min(e,t)},has:function(e,t){return hasOwnProperty.call(e,t)},create:Object.create,getProto:Object.getPrototypeOf,DESC:DESC,desc:desc,getDesc:Object.getOwnPropertyDescriptor,setDesc:defineProperty,getKeys:Object.keys,getNames:Object.getOwnPropertyNames,getSymbols:Object.getOwnPropertySymbols,assertDefined:assertDefined,ES5Object:Object,toObject:function(e){return $.ES5Object(assertDefined(e))},hide:hide,def:createDefiner(0),set:global.Symbol?simpleSet:hide,mix:function(e,t){for(var n in t)hide(e,n,t[n]);return e},each:[].forEach});"undefined"!=typeof __e&&(__e=core),"undefined"!=typeof __g&&(__g=global);


},{"./$.fw":17}],19:[function(require,module,exports){
var $def=require("./$.def");$def($def.S,"Object",{assign:require("./$.assign")});


},{"./$.assign":15,"./$.def":16}],20:[function(require,module,exports){
function replacer(t,e){return util.isUndefined(e)?""+e:util.isNumber(e)&&!isFinite(e)?e.toString():util.isFunction(e)||util.isRegExp(e)?e.toString():e}function truncate(t,e){return util.isString(t)?t.length<e?t:t.slice(0,e):t}function getMessage(t){return truncate(JSON.stringify(t.actual,replacer),128)+" "+t.operator+" "+truncate(JSON.stringify(t.expected,replacer),128)}function fail(t,e,r,i,s){throw new assert.AssertionError({message:r,actual:t,expected:e,operator:i,stackStartFunction:s})}function ok(t,e){t||fail(t,!0,e,"==",assert.ok)}function _deepEqual(t,e){if(t===e)return!0;if(util.isBuffer(t)&&util.isBuffer(e)){if(t.length!=e.length)return!1;for(var r=0;r<t.length;r++)if(t[r]!==e[r])return!1;return!0}return util.isDate(t)&&util.isDate(e)?t.getTime()===e.getTime():util.isRegExp(t)&&util.isRegExp(e)?t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase:util.isObject(t)||util.isObject(e)?objEquiv(t,e):t==e}function isArguments(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function objEquiv(t,e){if(util.isNullOrUndefined(t)||util.isNullOrUndefined(e))return!1;if(t.prototype!==e.prototype)return!1;if(util.isPrimitive(t)||util.isPrimitive(e))return t===e;var r=isArguments(t),i=isArguments(e);if(r&&!i||!r&&i)return!1;if(r)return t=pSlice.call(t),e=pSlice.call(e),_deepEqual(t,e);var s,n,a=objectKeys(t),u=objectKeys(e);if(a.length!=u.length)return!1;for(a.sort(),u.sort(),n=a.length-1;n>=0;n--)if(a[n]!=u[n])return!1;for(n=a.length-1;n>=0;n--)if(s=a[n],!_deepEqual(t[s],e[s]))return!1;return!0}function expectedException(t,e){return t&&e?"[object RegExp]"==Object.prototype.toString.call(e)?e.test(t):t instanceof e?!0:e.call({},t)===!0?!0:!1:!1}function _throws(t,e,r,i){var s;util.isString(r)&&(i=r,r=null);try{e()}catch(n){s=n}if(i=(r&&r.name?" ("+r.name+").":".")+(i?" "+i:"."),t&&!s&&fail(s,r,"Missing expected exception"+i),!t&&expectedException(s,r)&&fail(s,r,"Got unwanted exception"+i),t&&s&&r&&!expectedException(s,r)||!t&&s)throw s}var util=require("util/"),pSlice=Array.prototype.slice,hasOwn=Object.prototype.hasOwnProperty,assert=module.exports=ok;assert.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=getMessage(this),this.generatedMessage=!0);var e=t.stackStartFunction||fail;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var r=new Error;if(r.stack){var i=r.stack,s=e.name,n=i.indexOf("\n"+s);if(n>=0){var a=i.indexOf("\n",n+1);i=i.substring(a+1)}this.stack=i}}},util.inherits(assert.AssertionError,Error),assert.fail=fail,assert.ok=ok,assert.equal=function(t,e,r){t!=e&&fail(t,e,r,"==",assert.equal)},assert.notEqual=function(t,e,r){t==e&&fail(t,e,r,"!=",assert.notEqual)},assert.deepEqual=function(t,e,r){_deepEqual(t,e)||fail(t,e,r,"deepEqual",assert.deepEqual)},assert.notDeepEqual=function(t,e,r){_deepEqual(t,e)&&fail(t,e,r,"notDeepEqual",assert.notDeepEqual)},assert.strictEqual=function(t,e,r){t!==e&&fail(t,e,r,"===",assert.strictEqual)},assert.notStrictEqual=function(t,e,r){t===e&&fail(t,e,r,"!==",assert.notStrictEqual)},assert["throws"]=function(t,e,r){_throws.apply(this,[!0].concat(pSlice.call(arguments)))},assert.doesNotThrow=function(t,e){_throws.apply(this,[!1].concat(pSlice.call(arguments)))},assert.ifError=function(t){if(t)throw t};var objectKeys=Object.keys||function(t){var e=[];for(var r in t)hasOwn.call(t,r)&&e.push(r);return e};


},{"util/":24}],21:[function(require,module,exports){
"function"==typeof Object.create?module.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:module.exports=function(t,e){t.super_=e;var o=function(){};o.prototype=e.prototype,t.prototype=new o,t.prototype.constructor=t};


},{}],22:[function(require,module,exports){
function drainQueue(){if(!draining){draining=!0;for(var e,o=queue.length;o;){e=queue,queue=[];for(var r=-1;++r<o;)e[r]();o=queue.length}draining=!1}}function noop(){}var process=module.exports={},queue=[],draining=!1;process.nextTick=function(e){queue.push(e),draining||setTimeout(drainQueue,0)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};


},{}],23:[function(require,module,exports){
module.exports=function(o){return o&&"object"==typeof o&&"function"==typeof o.copy&&"function"==typeof o.fill&&"function"==typeof o.readUInt8};


},{}],24:[function(require,module,exports){
(function (process,global){
function inspect(e,r){var t={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(t.depth=arguments[2]),arguments.length>=4&&(t.colors=arguments[3]),isBoolean(r)?t.showHidden=r:r&&exports._extend(t,r),isUndefined(t.showHidden)&&(t.showHidden=!1),isUndefined(t.depth)&&(t.depth=2),isUndefined(t.colors)&&(t.colors=!1),isUndefined(t.customInspect)&&(t.customInspect=!0),t.colors&&(t.stylize=stylizeWithColor),formatValue(t,e,t.depth)}function stylizeWithColor(e,r){var t=inspect.styles[r];return t?"["+inspect.colors[t][0]+"m"+e+"["+inspect.colors[t][1]+"m":e}function stylizeNoColor(e,r){return e}function arrayToHash(e){var r={};return e.forEach(function(e,t){r[e]=!0}),r}function formatValue(e,r,t){if(e.customInspect&&r&&isFunction(r.inspect)&&r.inspect!==exports.inspect&&(!r.constructor||r.constructor.prototype!==r)){var n=r.inspect(t,e);return isString(n)||(n=formatValue(e,n,t)),n}var i=formatPrimitive(e,r);if(i)return i;var o=Object.keys(r),s=arrayToHash(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(r)),isError(r)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return formatError(r);if(0===o.length){if(isFunction(r)){var u=r.name?": "+r.name:"";return e.stylize("[Function"+u+"]","special")}if(isRegExp(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(isDate(r))return e.stylize(Date.prototype.toString.call(r),"date");if(isError(r))return formatError(r)}var a="",c=!1,l=["{","}"];if(isArray(r)&&(c=!0,l=["[","]"]),isFunction(r)){var p=r.name?": "+r.name:"";a=" [Function"+p+"]"}if(isRegExp(r)&&(a=" "+RegExp.prototype.toString.call(r)),isDate(r)&&(a=" "+Date.prototype.toUTCString.call(r)),isError(r)&&(a=" "+formatError(r)),0===o.length&&(!c||0==r.length))return l[0]+a+l[1];if(0>t)return isRegExp(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special");e.seen.push(r);var f;return f=c?formatArray(e,r,t,s,o):o.map(function(n){return formatProperty(e,r,t,s,n,c)}),e.seen.pop(),reduceToSingleString(f,a,l)}function formatPrimitive(e,r){if(isUndefined(r))return e.stylize("undefined","undefined");if(isString(r)){var t="'"+JSON.stringify(r).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(t,"string")}return isNumber(r)?e.stylize(""+r,"number"):isBoolean(r)?e.stylize(""+r,"boolean"):isNull(r)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(e,r,t,n,i){for(var o=[],s=0,u=r.length;u>s;++s)o.push(hasOwnProperty(r,String(s))?formatProperty(e,r,t,n,String(s),!0):"");return i.forEach(function(i){i.match(/^\d+$/)||o.push(formatProperty(e,r,t,n,i,!0))}),o}function formatProperty(e,r,t,n,i,o){var s,u,a;if(a=Object.getOwnPropertyDescriptor(r,i)||{value:r[i]},a.get?u=a.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):a.set&&(u=e.stylize("[Setter]","special")),hasOwnProperty(n,i)||(s="["+i+"]"),u||(e.seen.indexOf(a.value)<0?(u=isNull(t)?formatValue(e,a.value,null):formatValue(e,a.value,t-1),u.indexOf("\n")>-1&&(u=o?u.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+u.split("\n").map(function(e){return"   "+e}).join("\n"))):u=e.stylize("[Circular]","special")),isUndefined(s)){if(o&&i.match(/^\d+$/))return u;s=JSON.stringify(""+i),s.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+u}function reduceToSingleString(e,r,t){var n=0,i=e.reduce(function(e,r){return n++,r.indexOf("\n")>=0&&n++,e+r.replace(/\u001b\[\d\d?m/g,"").length+1},0);return i>60?t[0]+(""===r?"":r+"\n ")+" "+e.join(",\n  ")+" "+t[1]:t[0]+r+" "+e.join(", ")+" "+t[1]}function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"==typeof e}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"==typeof e&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||"undefined"==typeof e}function objectToString(e){return Object.prototype.toString.call(e)}function pad(e){return 10>e?"0"+e.toString(10):e.toString(10)}function timestamp(){var e=new Date,r=[pad(e.getHours()),pad(e.getMinutes()),pad(e.getSeconds())].join(":");return[e.getDate(),months[e.getMonth()],r].join(" ")}function hasOwnProperty(e,r){return Object.prototype.hasOwnProperty.call(e,r)}var formatRegExp=/%[sdj%]/g;exports.format=function(e){if(!isString(e)){for(var r=[],t=0;t<arguments.length;t++)r.push(inspect(arguments[t]));return r.join(" ")}for(var t=1,n=arguments,i=n.length,o=String(e).replace(formatRegExp,function(e){if("%%"===e)return"%";if(t>=i)return e;switch(e){case"%s":return String(n[t++]);case"%d":return Number(n[t++]);case"%j":try{return JSON.stringify(n[t++])}catch(r){return"[Circular]"}default:return e}}),s=n[t];i>t;s=n[++t])o+=isNull(s)||!isObject(s)?" "+s:" "+inspect(s);return o},exports.deprecate=function(e,r){function t(){if(!n){if(process.throwDeprecation)throw new Error(r);process.traceDeprecation?console.trace(r):console.error(r),n=!0}return e.apply(this,arguments)}if(isUndefined(global.process))return function(){return exports.deprecate(e,r).apply(this,arguments)};if(process.noDeprecation===!0)return e;var n=!1;return t};var debugs={},debugEnviron;exports.debuglog=function(e){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!debugs[e])if(new RegExp("\\b"+e+"\\b","i").test(debugEnviron)){var r=process.pid;debugs[e]=function(){var t=exports.format.apply(exports,arguments);console.error("%s %d: %s",e,r,t)}}else debugs[e]=function(){};return debugs[e]},exports.inspect=inspect,inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow","boolean":"yellow",undefined:"grey","null":"bold",string:"green",date:"magenta",regexp:"red"},exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=require("./support/isBuffer");var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];exports.log=function(){console.log("%s - %s",timestamp(),exports.format.apply(exports,arguments))},exports.inherits=require("inherits"),exports._extend=function(e,r){if(!r||!isObject(r))return e;for(var t=Object.keys(r),n=t.length;n--;)e[t[n]]=r[t[n]];return e};


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":23,"_process":22,"inherits":21}],25:[function(require,module,exports){
"use strict";var shallowEqual=require("./shallowEqual"),ReactComponentWithPureRenderMixin={shouldComponentUpdate:function(e,t){return!shallowEqual(this.props,e)||!shallowEqual(this.state,t)}};module.exports=ReactComponentWithPureRenderMixin;


},{"./shallowEqual":26}],26:[function(require,module,exports){
"use strict";function shallowEqual(r,n){if(r===n)return!0;var t;for(t in r)if(r.hasOwnProperty(t)&&(!n.hasOwnProperty(t)||r[t]!==n[t]))return!1;for(t in n)if(n.hasOwnProperty(t)&&!r.hasOwnProperty(t))return!1;return!0}module.exports=shallowEqual;


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
